#include <stdio.h>
void circular_left_shift(unsigned char *subkey, int shift) {
	int i,j,carry;
    for ( i = 0; i < shift; i++)
        for ( j = 0, carry = 0; j < 7; j++)
            subkey[j] = (subkey[j] << 1) | (carry = subkey[j + 1] & 0x80 ? 1 : 0);
}
int main() {
    unsigned char initial_key[8] = {0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0};
    unsigned char key[7] = {0};
    int i,round;
    for ( i = 0; i < 56; i++)
        key[i / 8] |= (initial_key[i / 8] & (1 << (7 - i % 8))) ? (1 << (7 - i % 8)) : 0;
    unsigned char left_half[7] = {0}, right_half[7] = {0};
    for ( i = 0; i < 28; i++) {
        left_half[i / 8] |= key[i / 8] & (1 << (7 - i % 8));
        right_half[i / 8] |= key[(i + 28) / 8] & (1 << (7 - i % 8));
    }
    int shift_amounts[16] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
    unsigned char subkeys[16][6] = {0};
    for ( round = 0; round < 16; round++) {
        circular_left_shift(left_half, shift_amounts[round]);
        circular_left_shift(right_half, shift_amounts[round]);
        int i;
        for (i = 0; i < 28; i++)
            key[i / 8] = left_half[i / 8], key[(i + 28) / 8] = right_half[i / 8];
        for ( i = 0; i < 48; i++)
            subkeys[round][i / 8] |= key[i / 8] & (1 << (7 - i % 8));
    }
    for ( round = 0; round < 16; round++) {
        printf("Subkey %2d: 0x", round + 1);
        int i;
        for (i = 0; i < 6; i++)
            printf("%02X", subkeys[round][i]);
        printf("\n");
    }
    return 0;
}
