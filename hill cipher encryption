#include <stdio.h>
#include <string.h>
#include <ctype.h>

int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return 1;
}

void encrypt(int keyMatrix[3][3], char *input, char *output) {
    int i, j, k;

    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            output[i] += keyMatrix[i][j] * (input[j] - 'A');
        }
        output[i] = output[i] % 26 + 'A';
    }
}

void hillCipher(char *input, char *key) {
    int keyMatrix[3][3];

    // Convert key to uppercase
    for (int i = 0; i < 9; i++) {
        key[i] = toupper(key[i]);
    }

    // Convert key to a 3x3 matrix
    int k = 0;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            keyMatrix[i][j] = key[k] - 'A';
            k++;
        }
    }

    // Check if the key is invertible
    int det = keyMatrix[0][0] * (keyMatrix[1][1] * keyMatrix[2][2] - keyMatrix[2][1] * keyMatrix[1][2]) -
              keyMatrix[0][1] * (keyMatrix[1][0] * keyMatrix[2][2] - keyMatrix[2][0] * keyMatrix[1][2]) +
              keyMatrix[0][2] * (keyMatrix[1][0] * keyMatrix[2][1] - keyMatrix[2][0] * keyMatrix[1][1]);

    det = (det % 26 + 26) % 26;

    if (det == 0 || det % 2 == 0 || det % 13 == 0) {
        printf("The key is not invertible. Choose a different key.\n");
        return;
    }

    int modInverseDet = modInverse(det, 26);

    for (int i = 0; i < strlen(input); i += 3) {
        char inputBlock[3] = {input[i], input[i + 1], input[i + 2]};
        char outputBlock[3] = {0};

        encrypt(keyMatrix, inputBlock, outputBlock);

        for (int j = 0; j < 3; j++) {
            printf("%c", outputBlock[j]);
        }
    }

    printf("\n");
}

int main() {
    char input[] = "HELLO";
    char key[] = "GYBNQKURP";

    printf("Input: %s\n", input);
    printf("Key: %s\n", key);

    hillCipher(input, key);

    return 0;
}
